// This is your Prisma validationSchema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model LearningPath {
  id          Int                  @id @default(autoincrement())
  title       String               @db.VarChar(255)
  description String?              @db.MediumText()
  courses     LearningPathCourse[]
}

model Course {
  id                 Int                  @id @default(autoincrement())
  title              String               @db.VarChar(255)
  status             Status               @default(NOT_STARTED_YET)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?            @updatedAt()
  duration           Float?               @db.Float()
  lastSeen           String?              @db.VarChar(255)
  difficulty         Difficulty           @default(BEGINNER)
  technology         Technology[]
  priority           Priority             @default(VERY_LOW)
  link               String?              @db.VarChar(2048)
  note               String?              @db.MediumText()
  description        String?              @db.MediumText()
  categoryId         Int
  category           Category?            @relation(fields: [categoryId], references: [id])
  platformId         Int
  platform           Platform?            @relation(fields: [platformId], references: [id])
  LearningPathCourse LearningPathCourse[]
}

model LearningPathCourse {
  id             Int           @id @default(autoincrement())
  learningPath   LearningPath? @relation(fields: [learningPathId], references: [id])
  learningPathId Int?
  course         Course        @relation(fields: [courseId], references: [id])
  courseId       Int
  order          Int

  @@unique([learningPathId, courseId])
}

model Platform {
  id     Int      @id @default(autoincrement())
  title  String   @db.VarChar(255)
  Course Course[]
}

model Category {
  id     Int      @id @default(autoincrement())
  title  String   @db.VarChar(255)
  Course Course[]
}

model Technology {
  id     Int      @id @default(autoincrement())
  title  String   @db.VarChar(255)
  Course Course[]
}

enum Status {
  NOT_STARTED_YET
  IN_PROGRESS
  DONE
  BLOCKED
  ABANDONED
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  MASTERY
}

enum Priority {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
  URGENT
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}